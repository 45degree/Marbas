#version 450

#define MAX_DIRECTIONAL_LIGHT_COUNT 32
#define CASCADE_COUNT 3

#extension GL_GOOGLE_include_directive : enable

#include "common/Shadow.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z  =8) in;

layout(binding = 0, set = 0) uniform sampler3D voxelScene;
layout(binding = 1, set = 0) uniform sampler3D voxelNormal;
layout(binding = 2, set = 0, rgba8) uniform writeonly image3D voxelRadiance;
layout(std140, binding = 3, set = 0) uniform VoxelInfo{
  mat4 projX;
  mat4 projY;
  mat4 projZ;
  vec4 voxelSizeResolution;
  vec3 probePos;
};

/**
 * light info data
 */
layout(std140, binding = 0, set = 1) uniform DirectionalLightList {
  int directionLightCount;
  DirectionLightInfo lightInfo[MAX_DIRECTIONAL_LIGHT_COUNT];
};

float
DirectionLightTraceShadow(vec3 position, vec3 direction, float maxTracingDistance) {
  // navigation
  float voxelTexSize = 1.0f / voxelSizeResolution.w;
  // move one voxel further to avoid self collision
  float dst = voxelTexSize * 3.0f;

  vec3 samplePos = direction * dst + position;

  // control variables
  float visibility = 0.0f;
  // accumulated sample
  float traceSample = 0.0f;

  while (visibility <= 1.0f && dst <= maxTracingDistance) {
    if (samplePos.x < 0.0f || samplePos.y < 0.0f || samplePos.z < 0.0f ||
        samplePos.x > 1.0f || samplePos.y > 1.0f || samplePos.z > 1.0f) { 
      break; 
    }
    
    traceSample = ceil(texture(voxelScene, samplePos).a) * 0.25;
    // traceSample = texture(voxelScene, samplePos).a;

    // hard shadows mode
    if(traceSample > 1.0f) {
      return 0.0f;
    }

    // accumulate
    visibility += (1.0f - visibility) * traceSample / dst;

    // move further into volume
    dst += voxelTexSize;
    samplePos = direction * dst + position;
  }

  return 1.0f - clamp(visibility, 0.0, 1.0);
}

vec3 EncodeNormal(vec3 normal) {
    return normal * 0.5f + vec3(0.5f);
}

vec3 DecodeNormal(vec3 normal) {
    return normal * 2.0f - vec3(1.0f);
}

void main() {
  int volumeDimension = int(voxelSizeResolution.w);
  ivec3 voxelPos = ivec3(gl_GlobalInvocationID);
  if(voxelPos.x >= volumeDimension || voxelPos.y >= volumeDimension || voxelPos.z >= volumeDimension) {
    return;
  }

  vec4 diffuseColor = texelFetch(voxelScene, voxelPos, 0);
  vec3 normal = DecodeNormal(texelFetch(voxelNormal, voxelPos, 0).xyz);

  // it's an empty voxel
  if(diffuseColor.a < 1e-5) return;
  
  vec4 radiance = vec4(0.f);
  if(any(greaterThan(diffuseColor.rgb, vec3(0.f)))) {
    // 计算
    for(int i = 0; i < directionLightCount; i++) {
      if(lightInfo[i].directionShadow.w < 0.5) continue; // light unenable shadow

      vec3 lightColor = lightInfo[i].colorEnergy.xyz * lightInfo[i].colorEnergy.w;
      vec3 direction = -normalize(lightInfo[i].directionShadow.xyz);
      vec3 samplePos = voxelPos / float(volumeDimension);
      float visible = DirectionLightTraceShadow(samplePos, direction, 1.0f);
      radiance.xyz += diffuseColor.xyz * lightColor * max(dot(direction, normal), 0) * visible;
    }
    radiance.a = 1.0;
  }
  imageStore(voxelRadiance, voxelPos, radiance);
}
