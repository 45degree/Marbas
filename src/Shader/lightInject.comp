#version 450

#define MAX_DIRECTIONAL_LIGHT_COUNT 32
#define CASCADE_COUNT 3

#extension GL_GOOGLE_include_directive : enable

#include "common/Shadow.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z  =8) in;

layout(std140, binding = 0, set = 0) uniform VoxelInfo {
  /**
   * @berif the voxel texture infomation
   *
   * @detail
   * 1: the resolution of voxel(e.g. 256 means the the image is 256x256x256).
   * 2,3,4: the real world size of a voxel.
   */ 
  vec4 voxelResoultionSize;
  vec3 voxelCenter;
};

layout(binding = 0, set = 1) uniform sampler3D voxelScene;
layout(binding = 1, set = 1) uniform sampler3D voxelNormal;
layout(binding = 2, set = 1, rgba8) uniform writeonly image3D voxelRadiance;

/**
 * light info data
 */
layout(std140, binding = 0, set = 2) uniform DirectionalLightList {
  int shadowLightCount;
  int unshadowLightCount;
  int shadowLightIndexList[MAX_DIRECTIONAL_LIGHT_COUNT];
  int unshadowLightIndexList[MAX_DIRECTIONAL_LIGHT_COUNT];
  DirectionLightInfo lightInfo[MAX_DIRECTIONAL_LIGHT_COUNT];
};

float
DirectionLightTraceShadow(vec3 position, vec3 direction, float maxTracingDistance) {
  // navigation
  float voxelTexSize = 1.0f / voxelResoultionSize.x;
  // move one voxel further to avoid self collision
  float dst = voxelTexSize * 2.0f;

  vec3 samplePos = direction * dst + position;

  // control variables
  float visibility = 0.0f;
  // accumulated sample
  float traceSample = 0.0f;

  while (visibility <= 1.0f && dst <= maxTracingDistance) {
    if (samplePos.x < 0.0f || samplePos.y < 0.0f || samplePos.z < 0.0f ||
        samplePos.x > 1.0f || samplePos.y > 1.0f || samplePos.z > 1.0f) { 
      break; 
    }
    
    traceSample = texture(voxelScene, samplePos).a;

    // hard shadows mode
    if(traceSample > 1.0f) {
      return 0.0f;
    }

    // accumulate
    visibility += (1.0f - visibility) * traceSample;

    // move further into volume
    dst += voxelTexSize;
    samplePos = direction * dst + position;
    // return 1.0f - clamp(visibility, 0.0, 1.0);
  }

  return 1.0f - clamp(visibility, 0.0, 1.0);
}

void main() {
  int volumeDimension = int(voxelResoultionSize.x);
  ivec3 voxelPos = ivec3(gl_GlobalInvocationID);
  if(voxelPos.x >= volumeDimension || voxelPos.y >= volumeDimension || voxelPos.z >= volumeDimension) {
    return;
  }

  vec4 diffuseColor = texelFetch(voxelScene, voxelPos, 0);
  vec3 normal = texelFetch(voxelNormal, voxelPos, 0).xyz;

  // it's an empty voxel
  if(diffuseColor.a < 1e-5) return;
  
  vec4 radiance = vec4(0.f);
  if(any(greaterThan(diffuseColor.rgb, vec3(0.f)))) {
    // 计算
    for(int i = 0; i < shadowLightCount; i++) {
      vec3 direction = -normalize(lightInfo[shadowLightIndexList[i]].direction);
      vec3 samplePos = voxelPos / float(volumeDimension);
      float visible = DirectionLightTraceShadow(samplePos, direction, 1.0f);
      radiance += vec4(diffuseColor.xyz * visible, diffuseColor.a);
    }
  }
  imageStore(voxelRadiance, voxelPos, radiance);
}
